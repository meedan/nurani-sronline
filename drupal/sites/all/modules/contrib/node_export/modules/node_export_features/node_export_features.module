<?php

/**
 * Implementation of hook_features_api().
 */
function node_export_features_features_api() {
  return array(
    'node_export_features' => array(
      'name' => t('Node export'),
      'feature_source' => TRUE,
      'default_hook' => 'node_export_features_default',
      'default_file' => FEATURES_DEFAULTS_INCLUDED,
    ),
  );
}

/**
 * Implementation of hook_features_export_options().
 */
function node_export_features_features_export_options() {
  static $loaded_nodes = 0;

  $options = array();

  $types = node_get_types('names');

  $query = 'SELECT n.nid, n.title, n.type FROM {node} n';
  $query .= ' ORDER BY n.type, n.title ASC';
  $result = db_query($query);

  while ($row = db_fetch_object($result)) {

    $uuid = uuid_get_uuid('node', 'nid', $row->nid);
    // Create uuid if it doesn't exist.
    if (empty($uuid)) {
      if ($loaded_nodes > 20) {
        drupal_set_message("Too many nodes are missing UUID, therefore some nodes will not be available for features export. Repeatedly triggering this message will help this problem.", 'warning');
        break;
      }
      else {
        $node = node_load($row->nid);
        $uuid = uuid_set_uuid('node', 'nid', $node->nid);
        $node->uuid = $uuid;
        // Save for consistency.
        node_save($node);
        $loaded_nodes++;
      }
    }

    $options[$uuid] = t('@type: @title', array(
      '@type' => $types[$row->type],
      '@title' => $row->title,
    ));
  }

  return $options;

}

/**
 * Implementation of hook_features_export().
 */
function node_export_features_features_export($data, &$export, $module_name = '') {
  $pipe = array();

  $export['dependencies']['module'] = 'node_export_features';

  foreach ($data as $uuid) {
    $node = node_get_by_uuid($uuid);

    $export['features']['node_export_features'][$uuid] = $uuid;
    $pipe['node'][$node->type] = $node->type;
  }

  return $pipe;

}

/**
 * Implementation of hook_features_export_render().
 */
function node_export_features_features_export_render($module, $data, $export = NULL) {
  foreach ($data as $uuid) {
    $node = node_get_by_uuid($uuid);
    $nids[] = $node->nid;
  }
  $result = node_export($nids);
  if ($result['success']) {
    $node_export['code_string'] = $result['output'];
    $node_export_code = '  $node_export = ' . features_var_export($node_export) . ';';
  }
  else {
    foreach ($result['output'] as $error) {
      $node_export_code  = '  // ' . $error . PHP_EOL;
    }
    $node_export_code .= '  $node_export = array();';
  }
  $node_export_code .= PHP_EOL . '  return $node_export;';
  return array('node_export_features_default' => $node_export_code);
}

/**
 * Implementation of hook_feature_revert().
 */
function node_export_features_features_revert($module = NULL) {
  node_export_features_features_rebuild($module);
}

/**
 * Implementation of hook_feature_rebuild().
 */
function node_export_features_features_rebuild($module) {
  $node_export = features_get_default('node_export_features', $module);
  if (!empty($node_export)) {
    $result = node_export_import($node_export['code_string']);
    if (!$result['success']) {
      foreach ($result['output'] as $error) {
        drupal_set_message($error, 'error');
      }
    }
    else {
      foreach ($result['output'] as $status) {
        drupal_set_message($status);
      }
    }
  }
}

