<?php

/**
 * @file
 * CCK support for Node Displays.
 */

/**
 * Implementation of hook_ds_info_alter().
 */
function nd_cck_ds_info_alter(&$help, $module) {
  if ($module == 'nd') {
    $help[] = '<h3>Node displays CCK</h3><p>In the nd_cck folder you can find nd_cck.tpl.php which is optimized for CCK fields. You can copy this to your themes directory if you want to use your own version. It\'s a replacement for the default CCK content-field.tpl.php file. Copying the file to your theme folder will only work if content-field.tpl.php is in the theme folder. If Node reference is enabled, additional formatters will be available to render the node through the Display suite.<br />Note that if you disable this module, some fields still might be excluded from rendering, so make sure you visit the old display settings screen.</p>';
  }
}

/**
 * Implementation of hook_registry_alter().
 */
function nd_cck_theme_registry_alter(&$registry) {
  $path = drupal_get_path('module', 'nd_cck');
  array_unshift($registry['content_field']['theme paths'], $path);
}

/**
 * Implementation of hook_ds_fields().
 */
function nd_cck_ds_fields($type_name, $build_mode, $extra) {
  $fields = array();
  if (!empty($type_name)) {
    $type = content_types($type_name);
    $field_types = _content_field_types();
    $fields = $type['fields'];
    foreach ($fields as $field => $value) {
      $options = array();
      $field_type = $field_types[$value['type']];
      if (isset($field_type['formatters'])) {
        foreach ($field_type['formatters'] as $formatter_name => $formatter_info) {
          $options[$formatter_name] = $formatter_info['label'];
        }
      }
      $fields[$field]['storage'] = TRUE;
      $fields[$field]['title'] = $value['widget']['label'];
      $fields[$field]['status'] = DS_FIELD_STATUS_STATIC;
      $fields[$field]['properties']['formatters'] = $options;
    }

    // Fieldgroup support.
    if (module_exists('fieldgroup')) {
      $groups = fieldgroup_groups($type_name);
      if (!empty($groups)) {
        foreach ($groups as $key => $group) {
          if ($group['group_type'] == 'multigroup') {
            $fields[$key] = array(
              'title' => $group['label'],
              'type' => DS_FIELD_TYPE_MULTIGROUP,
              'status' => DS_FIELD_STATUS_STATIC,
              'properties' => array(
                'formatters' => array(
                  'ds_field' => 'A simple div',
                  'ds_group_fieldset_open' => 'Fieldset open',
                  'ds_group_fieldset_collapsible' => 'Fieldset collapsible',
                  'ds_group_fieldset_collapsed' => 'Fieldset collapsed',
                ),
                'subgroup_formatters' => array(
                  'ds_multigroup_div' => 'A simple div',
                  'ds_multigroup_fieldset_open' => 'Fieldset open',
                  'ds_multigroup_fieldset_collapsible' => 'Fieldset collapsible',
                  'ds_multigroup_fieldset_collapsed' => 'Fieldset collapsed',
                  'ds_multigroup_table_simple' => 'Table - Single column',
                  'ds_multigroup_table_multiple' => 'Table - Multiple columns',
                  'ds_multigroup_horizontal_line' => 'Horizontal line',
                  'ds_multigroup_list_ul' => 'List - unordered',
                  'ds_multigroup_list_ol' => 'List - ordered',
                  'ds_multigroup_comma_separated' => 'Inline - comma separated'
                ),
              ),
            );
          }
          else {
            $fields[$key] = array(
              'title' => $group['label'],
              'type' => DS_FIELD_TYPE_GROUP,
              'status' => DS_FIELD_STATUS_STATIC,
              'properties' => array(
                'formatters' => array(
                  'ds_field' => 'A simple div',
                  'ds_group_fieldset_open' => 'Fieldset open',
                  'ds_group_fieldset_collapsible' => 'Fieldset collapsible',
                  'ds_group_fieldset_collapsed' => 'Fieldset collapsed',
                ),
              ),
            );
          }

          // Tabs support.
          if (module_exists('tabs')) {
            $fields[$key]['properties']['formatters']['ds_tabs'] = 'Tabs';
          }
        }
      }
    }
  }

  return array('nd' => $fields);
}

/**
 * Implementation of hook_nodeapi()
 *
 * Groups are added to the node object fully nested. This makes it very difficult
 * to retrieve for Display Suite. We pull them back out here.
 */
function nd_cck_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'view':
      // Prevent against invalid 'nodes' built by broken 3rd party code.
      if (isset($node->type)) {
        $existing = array();
        if (isset($node->groups)) {
          $existing = $node->groups;
        }
        if(module_exists('fieldgroup')) {
          // Fieldgroup_groups is cached, thankfully
          $new = fieldgroup_groups($node->type);
          $node->groups = array_merge($existing, $new);
        }
      }
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function nd_cck_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'ds_display_overview_form') {
    $form['#submit'][] = 'nd_cck_display_overview_form_submit';
  }
}

/**
 * Submit handler for the display overview form.
 */
function nd_cck_display_overview_form_submit($form, &$form_state) {

  $build_mode = $form['#build_mode'];
  $module = $form['#module'];
  $type = $form['#type_name'];
  $sync_copy = _ds_get_sync_copy($form, $form_state);

  // Fields.
  module_load_include('inc', 'content', 'includes/content.crud');
  $form_values = $form_state['values'];
  foreach ($form_values as $key => $values) {
    if (in_array($key, $form['#fields'])) {

      $field = content_fields($key, $form['#type_name']);
      $weight = $form_values[$key]['ds_weight'];
      $format = isset($form_values[$key][$build_mode]['format']) ? $form_values[$key][$build_mode]['format'] : 'default';
      $exclude = (isset($form_values[$key][$build_mode]['region']) && $form_values[$key][$build_mode]['region'] == 'disabled') ? 1 : 0;
      $class = (isset($form_values[$key][$build_mode]['css-class'])) ? implode(' ', $form_state['values'][$key][$build_mode]['css-class']) : '';

      // We have some numeric keys here, so we can't use array_merge
      $field['display_settings'] = $values + $field['display_settings'];
      $field['display_settings'][$build_mode]['css-class'] = $class;
      $field['display_settings'][$build_mode]['exclude'] = $exclude;
      $field['display_settings'][$build_mode]['weight'] = $weight;

      // Sync / copy ?
      if (!empty($sync_copy)) {
        foreach ($sync_copy['copy'] as $build_mode) {
          $field['display_settings'][$build_mode]['format'] = $format;
          $field['display_settings'][$build_mode]['exclude'] = $exclude;
          $field['display_settings'][$build_mode]['weight'] = $weight;
          $field['display_settings'][$build_mode]['css-class'] = $class;
        }
      }

      content_field_instance_update($field);
    }
  }
}

/**
 * Theme preprocess function for field.tpl.php.
 * Apply the label settings for the active context.
 */
function nd_cck_preprocess_content_field(&$variables) {

  array_unshift($variables['template_files'], 'nd_cck');
  $variables['template_files'][0] = 'content-field';
  $variables['template_files'][1] = 'nd_cck';

  $element = $variables['element'];

  $field = content_fields($element['#field_name'], $element['#node']->type);

  $variables['label_display'] = nd_cck_get_label_format($field, $element);
  $variables['label'] = nd_cck_get_label_value($field, $element);

  // Extra css class.
  $class = isset($field['display_settings'][$element['#context']]['css-class']) ? $field['display_settings'][$element['#context']]['css-class'] : '';
  if (!empty($class)) {
    if (is_array($class)) {
      $class = implode(' ', $class);
    }
    $variables['field_name_css'] .= ' '. $class;
  }
}

/**
 * Helper to set a label format correctly
 *
 * @param array $field
 *  a field array as returned by content_fields()
 * @param array $element
 *  the CCK element, e.g. from $vars
 */
function nd_cck_get_label_format($field, $element) {
  // Delegate the label format to cck.
  if (!empty($field['display_settings'][$element['#context']]['label']['format'])) {
    $format = $field['display_settings'][$element['#context']]['label']['format'];
  }
  else {
    $format = $field['display_settings']['label']['format'];
  }

  return $format;
}

/**
 * Helper to set a label value
 *
 * @param array $field
 *  a field array as returned by content_fields()
 * @param array $element
 *  the CCK element, e.g. from $vars
 */
function nd_cck_get_label_value($field, $element) {

  // Override the label if a custom label is set.
  $label = NULL;
  if (!empty($field['display_settings'][$element['#context']]['label_value'])) {
   $label = $field['display_settings'][$element['#context']]['label_value'];
  }
  elseif (!empty($field['display_settings']['label_value'])) {
    $label = $field['display_settings']['label_value'];
  }
  elseif (!empty($field['widget']['label'])) {
    $label = $field['widget']['label'];
  }

  if (!empty($label)) {
    return $label;
  }
  return FALSE;
}

/**
 * Implementation of hook_ds_render_alter()
 */
function nd_cck_ds_render_alter(&$data){
  if ($data['module'] == 'nd'){
    content_preprocess_node($data['vars']);
  }
}

/**
 * Implementation of hook_field_formatter_info().
 *
 * Adds extra build modes to formatters of node reference.
 */
function nd_cck_field_formatter_info() {
  $formatters = array();

  if (module_exists('nodereference')) {
    $build_modes = ds_get_build_modes('nd');
    foreach ($build_modes as $key => $build_mode) {
      $formatters['node_'. $key] = array(
        'label' => t('Build mode: @build_mode', array('@build_mode' => $build_mode['title'])),
        'field types' => array('nodereference'),
        'multiple values' => CONTENT_HANDLE_CORE,
      );
    }
  }

  return $formatters;
}

/**
 * Implementation of hook_theme().
 *
 * Adds theming functions for node reference and node displays.
 */
function nd_cck_theme() {
  $theme_functions = array();

  if (module_exists('nodereference')) {
    $build_modes = ds_get_build_modes('nd');
    foreach ($build_modes as $key => $build_mode) {
      $theme_functions['nd_cck_formatter_node_'. $key] = array(
        'arguments' => array('element'),
        'function' => 'theme_nd_cck_node_formatter',
      );
    }
  }

  // Support Multigroup for CCK 6.x-3.0
  $theme_functions['nd_cck_multigroup'] =  array(
    'arguments' => array ('element', 'group'),
    'function' => 'theme_nd_cck_multigroup'
  );

  return $theme_functions;
}

/**
 * Implementation of hook_ds_settings_import().
 */
function nd_cck_ds_settings_import($module, $type, $settings) {

  // Only works for Node Displays.
  if ($module != 'nd') {
    return;
  }

  module_load_include('inc', 'content', 'includes/content.crud');

  $info = _content_type_info();
  $fields = $info['content types'][$type]['fields'];

  foreach ($settings as $build_mode => $settings) {
    foreach ($settings['fields'] as $field_key => $field_value) {
      if (isset($fields[$field_key])) {
        $fields[$field_key]['display_settings'][$build_mode]['weight'] = $field_value['weight'];
        $fields[$field_key]['display_settings'][$build_mode]['css-class'] = $field_value['css-class'];
        $fields[$field_key]['display_settings'][$build_mode]['format'] = $field_value['format'];
        $fields[$field_key]['display_settings'][$build_mode]['label']['format'] = $field_value['labelformat'];
        $exclude = (isset($field_value['region']) && $field_value['region'] == 'disabled') ? 1 : 0;
        $fields[$field_key]['display_settings'][$build_mode]['exclude'] = $exclude;
        if (isset($field_value['label_value'])) {
          $fields[$field_key]['display_settings'][$build_mode]['label_value'] = $field_value['label_value'];
        }
      }
    }
  }

  foreach ($fields as $field) {
    content_field_instance_update($field);
  }
}

/**
 * Node reference theme formatter to support Node Displays.
 * Based on theme_nodereference_formatter_full_teaser.
 */
function theme_nd_cck_node_formatter($element) {

  static $recursion_queue = array();

  $output = '';
  $build_mode = str_replace('node_', '', $element['#formatter']);

  if (!empty($element['#item']['nid']) && is_numeric($element['#item']['nid'])) {
    $node = $element['#node'];
    $field = content_fields($element['#field_name'], $element['#type_name']);
    // If no 'referencing node' is set, we are starting a new 'reference thread'
    if (!isset($node->referencing_node)) {
      $recursion_queue = array();
    }
    $recursion_queue[] = $node->nid;
    if (in_array($element['#item']['nid'], $recursion_queue)) {
      // Prevent infinite recursion caused by reference cycles:
      // if the node has already been rendered earlier in this 'thread',
      // we fall back to 'default' (node title) formatter.
      return theme('nodereference_formatter_default', $element);
    }
    if ($referenced_node = node_load($element['#item']['nid'])) {
      if ($referenced_node->status <> 0 || node_access('view', $referenced_node)) {
        $referenced_node->referencing_node = $node;
        $referenced_node->referencing_field = $field;
        $referenced_node->build_mode = $build_mode;
        _nodereference_titles($element['#item']['nid'], $referenced_node->title);
        $page = FALSE;
        $teaser = TRUE;
        if ($build_mode == 'full') {
          $page = TRUE;
          $teaser = FALSE;
        }
        $output = node_view($referenced_node, $teaser, $page, FALSE);
      }
    }
  }
  return $output;
}
